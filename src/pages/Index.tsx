import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

const Index = () => {
  const [promoCode, setPromoCode] = useState('');
  const [discount, setDiscount] = useState(0);
  const [customAmount, setCustomAmount] = useState('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedAmount, setSelectedAmount] = useState(0);
  const [selectedPrice, setSelectedPrice] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState('card');
  const [username, setUsername] = useState('');
  const { toast } = useToast();

  const ROBUX_RATE = 0.7625;

  const packages = [
    { id: 1, amount: 400, price: 305, popular: false },
    { id: 2, amount: 800, price: 610, popular: true },
    { id: 3, amount: 1700, price: 1295, popular: false },
    { id: 4, amount: 4500, price: 3430, popular: false },
  ];

  const reviews = [
    { name: '–ê–ª–µ–∫—Å–µ–π –ú.', rating: 5, text: '–ë—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ! –†–æ–±—É–∫—Å—ã –ø—Ä–∏—à–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞ –º–∏–Ω—É—Ç—É.' },
    { name: '–ú–∞—Ä–∏—è –ö.', rating: 5, text: '–õ—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å! –ü–æ–ª—å–∑—É—é—Å—å —É–∂–µ –ø–æ–ª–≥–æ–¥–∞, –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ.' },
    { name: '–î–º–∏—Ç—Ä–∏–π –ü.', rating: 5, text: '–ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ª—É—á–∏–ª —Å–∫–∏–¥–∫—É 10%. –†–µ–∫–æ–º–µ–Ω–¥—É—é!' },
  ];

  const faqItems = [
    { q: '–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ä–æ–±—É–∫—Å—ã?', a: '–û–±—ã—á–Ω–æ —Ä–æ–±—É–∫—Å—ã –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.' },
    { q: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å –∑–¥–µ—Å—å?', a: '–î–∞, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.' },
    { q: '–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?', a: '–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –µ—Å–ª–∏ —Ä–æ–±—É–∫—Å—ã –Ω–µ –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ –Ω–∞—à–µ–π –≤–∏–Ω–µ.' },
    { q: '–ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?', a: '–ü—Ä–æ–º–æ–∫–æ–¥—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ Telegram-–∫–∞–Ω–∞–ª–µ.' },
  ];

  const promoCodes: { [key: string]: number } = {
    'WELCOME10': 10,
    'SALE15': 15,
    'PROMO20': 20,
  };

  const applyPromoCode = () => {
    const code = promoCode.toUpperCase();
    if (promoCodes[code]) {
      setDiscount(promoCodes[code]);
      toast({
        title: '‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω!',
        description: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É ${promoCodes[code]}%`,
      });
    } else {
      toast({
        title: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
        description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞',
        variant: 'destructive',
      });
    }
  };

  const calculatePrice = (price: number) => {
    if (discount > 0) {
      return Math.round(price * (1 - discount / 100));
    }
    return price;
  };

  const calculateCustomRobux = (amount: string) => {
    const num = parseInt(amount);
    if (isNaN(num) || num < 100) return 0;
    return Math.round(num * ROBUX_RATE);
  };

  const handleCustomBuy = () => {
    const amount = parseInt(customAmount);
    if (isNaN(amount) || amount < 100) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100‚ÇΩ',
        variant: 'destructive',
      });
      return;
    }
    const robux = calculateCustomRobux(customAmount);
    const finalPrice = calculatePrice(amount);
    setSelectedAmount(robux);
    setSelectedPrice(finalPrice);
    setIsDialogOpen(true);
  };

  const handlePackageBuy = (amount: number, price: number) => {
    setSelectedAmount(amount);
    setSelectedPrice(calculatePrice(price));
    setIsDialogOpen(true);
  };

  const handlePayment = () => {
    if (!username.trim()) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Roblox',
        variant: 'destructive',
      });
      return;
    }

    toast({
      title: 'üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ',
      description: `${selectedAmount} —Ä–æ–±—É–∫—Å–æ–≤ ‚Ä¢ ${selectedPrice}‚ÇΩ`,
    });

    setIsDialogOpen(false);
    setUsername('');
    setCustomAmount('');
  };

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b border-border sticky top-0 bg-background/95 backdrop-blur-sm z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="w-10 h-10 bg-primary rounded-lg flex items-center justify-center">
                <Icon name="Coins" size={24} className="text-primary-foreground" />
              </div>
              <span className="text-2xl font-bold">RobuxShop</span>
            </div>
            <nav className="hidden md:flex gap-6">
              <a href="#catalog" className="hover:text-primary transition-colors">–ö–∞—Ç–∞–ª–æ–≥</a>
              <a href="#calculator" className="hover:text-primary transition-colors">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</a>
              <a href="#reviews" className="hover:text-primary transition-colors">–û—Ç–∑—ã–≤—ã</a>
              <a href="#faq" className="hover:text-primary transition-colors">FAQ</a>
              <a href="#contact" className="hover:text-primary transition-colors">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
            </nav>
          </div>
        </div>
      </header>

      <section className="py-20 animate-fade-in">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
            –ü–æ–∫—É–ø–∞–π —Ä–æ–±—É–∫—Å—ã
          </h1>
          <p className="text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
            –ë—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –≤—ã–≥–æ–¥–Ω–æ. –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.
          </p>
          <Button size="lg" className="text-lg px-8" onClick={() => document.getElementById('catalog')?.scrollIntoView({ behavior: 'smooth' })}>
            <Icon name="ShoppingCart" size={20} className="mr-2" />
            –ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫—É
          </Button>
        </div>
      </section>

      <section id="calculator" className="py-16 bg-muted/30">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–æ–±—É–∫—Å–æ–≤</h2>
          <div className="max-w-2xl mx-auto">
            <Card className="animate-scale-in">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon name="Calculator" size={24} />
                  –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                </CardTitle>
                <CardDescription>–ö—É–ø–∏—Ç–µ —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –Ω—É–∂–Ω–æ (–º–∏–Ω–∏–º—É–º 100‚ÇΩ)</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="rubles">–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö</Label>
                    <Input
                      id="rubles"
                      type="number"
                      placeholder="100"
                      min="100"
                      value={customAmount}
                      onChange={(e) => setCustomAmount(e.target.value)}
                      className="text-lg"
                    />
                  </div>
                  <div>
                    <Label>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–æ–±—É–∫—Å–æ–≤</Label>
                    <div className="h-10 flex items-center justify-center bg-primary/10 rounded-lg text-2xl font-bold text-primary">
                      {calculateCustomRobux(customAmount) || '‚Äî'}
                    </div>
                  </div>
                </div>
                <div className="p-4 bg-muted rounded-lg space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">–ö—É—Ä—Å:</span>
                    <span className="font-semibold">1‚ÇΩ = {ROBUX_RATE.toFixed(2)} —Ä–æ–±—É–∫—Å–æ–≤</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">–í–∞—à–∞ –≤—ã–≥–æ–¥–∞:</span>
                    <span className="font-semibold text-primary">–ö–æ–º–∏—Å—Å–∏—è 7%</span>
                  </div>
                  {discount > 0 && (
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É:</span>
                      <span className="font-semibold text-secondary">{discount}%</span>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter>
                <Button size="lg" className="w-full" onClick={handleCustomBuy}>
                  <Icon name="ShoppingCart" size={20} className="mr-2" />
                  –ö—É–ø–∏—Ç—å –∑–∞ {customAmount ? calculatePrice(parseInt(customAmount)) : '‚Äî'}‚ÇΩ
                </Button>
              </CardFooter>
            </Card>
          </div>
        </div>
      </section>

      <section id="catalog" className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã</h2>
          
          <div className="max-w-md mx-auto mb-8">
            <Card className="animate-scale-in">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon name="Tag" size={20} />
                  –ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?
                </CardTitle>
                <CardDescription>–ü–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex gap-2">
                  <Input
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"
                    value={promoCode}
                    onChange={(e) => setPromoCode(e.target.value)}
                    className="flex-1"
                  />
                  <Button onClick={applyPromoCode}>
                    –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                  </Button>
                </div>
                {discount > 0 && (
                  <div className="mt-3 p-3 bg-primary/10 rounded-lg text-center">
                    <p className="text-sm font-semibold text-primary">
                      üéâ –°–∫–∏–¥–∫–∞ {discount}% –∞–∫—Ç–∏–≤–Ω–∞!
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {packages.map((pkg) => (
              <Card key={pkg.id} className={`relative hover:scale-105 transition-transform ${pkg.popular ? 'border-primary border-2' : ''}`}>
                {pkg.popular && (
                  <Badge className="absolute -top-3 left-1/2 -translate-x-1/2 bg-secondary">
                    –ü–æ–ø—É–ª—è—Ä–Ω—ã–π
                  </Badge>
                )}
                <CardHeader>
                  <CardTitle className="text-3xl text-center">
                    <Icon name="Coins" size={32} className="inline-block text-primary mb-2" />
                    <div>{pkg.amount}</div>
                  </CardTitle>
                  <CardDescription className="text-center">–†–æ–±—É–∫—Å–æ–≤</CardDescription>
                </CardHeader>
                <CardContent className="text-center">
                  <div className="text-4xl font-bold mb-2">
                    {discount > 0 && (
                      <div className="text-lg text-muted-foreground line-through">{pkg.price}‚ÇΩ</div>
                    )}
                    {calculatePrice(pkg.price)}‚ÇΩ
                  </div>
                  {discount > 0 && (
                    <Badge variant="secondary" className="mb-2">–≠–∫–æ–Ω–æ–º–∏—è {pkg.price - calculatePrice(pkg.price)}‚ÇΩ</Badge>
                  )}
                </CardContent>
                <CardFooter>
                  <Button className="w-full" size="lg" onClick={() => handlePackageBuy(pkg.amount, pkg.price)}>
                    <Icon name="ShoppingCart" size={18} className="mr-2" />
                    –ö—É–ø–∏—Ç—å
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      </section>

      <section id="reviews" className="py-16 bg-muted/30">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">–û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-5xl mx-auto">
            {reviews.map((review, idx) => (
              <Card key={idx} className="animate-fade-in">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{review.name}</CardTitle>
                    <div className="flex gap-1">
                      {[...Array(review.rating)].map((_, i) => (
                        <Icon key={i} name="Star" size={16} className="text-primary fill-primary" />
                      ))}
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground">{review.text}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      <section id="faq" className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
          <div className="max-w-3xl mx-auto">
            <Accordion type="single" collapsible>
              {faqItems.map((item, idx) => (
                <AccordionItem key={idx} value={`item-${idx}`}>
                  <AccordionTrigger className="text-left">{item.q}</AccordionTrigger>
                  <AccordionContent>{item.a}</AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </div>
        </div>
      </section>

      <section id="contact" className="py-16 bg-muted/30">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h2>
          <div className="max-w-2xl mx-auto">
            <Card>
              <CardHeader>
                <CardTitle>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</CardTitle>
                <CardDescription>–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center gap-3">
                  <Icon name="Mail" size={20} className="text-primary" />
                  <span>support@robuxshop.ru</span>
                </div>
                <div className="flex items-center gap-3">
                  <Icon name="MessageCircle" size={20} className="text-primary" />
                  <span>Telegram: @robuxshop_support</span>
                </div>
                <div className="flex items-center gap-3">
                  <Icon name="Clock" size={20} className="text-primary" />
                  <span>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      <footer className="border-t border-border py-8">
        <div className="container mx-auto px-4 text-center text-muted-foreground">
          <p>¬© 2024 RobuxShop. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          <p className="text-sm mt-2">–ú—ã –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å Roblox Corporation</p>
        </div>
      </footer>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Icon name="ShoppingCart" size={24} />
              –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            </DialogTitle>
            <DialogDescription>
              –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="p-4 bg-primary/10 rounded-lg">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm text-muted-foreground">–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ:</span>
                <span className="text-xl font-bold text-primary">{selectedAmount} —Ä–æ–±—É–∫—Å–æ–≤</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-muted-foreground">–ö –æ–ø–ª–∞—Ç–µ:</span>
                <span className="text-2xl font-bold">{selectedPrice}‚ÇΩ</span>
              </div>
            </div>

            <div>
              <Label htmlFor="username">–ù–∏–∫–Ω–µ–π–º –≤ Roblox</Label>
              <Input
                id="username"
                placeholder="–í–∞—à –Ω–∏–∫–Ω–µ–π–º"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </div>

            <div>
              <Label>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</Label>
              <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod} className="mt-2">
                <div className="flex items-center space-x-2 p-3 border border-border rounded-lg hover:bg-muted/50 cursor-pointer">
                  <RadioGroupItem value="card" id="card" />
                  <Label htmlFor="card" className="flex items-center gap-2 cursor-pointer flex-1">
                    <Icon name="CreditCard" size={20} className="text-primary" />
                    –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
                  </Label>
                </div>
                <div className="flex items-center space-x-2 p-3 border border-border rounded-lg hover:bg-muted/50 cursor-pointer">
                  <RadioGroupItem value="sbp" id="sbp" />
                  <Label htmlFor="sbp" className="flex items-center gap-2 cursor-pointer flex-1">
                    <Icon name="Smartphone" size={20} className="text-primary" />
                    –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π)
                  </Label>
                </div>
                <div className="flex items-center space-x-2 p-3 border border-border rounded-lg hover:bg-muted/50 cursor-pointer">
                  <RadioGroupItem value="yoomoney" id="yoomoney" />
                  <Label htmlFor="yoomoney" className="flex items-center gap-2 cursor-pointer flex-1">
                    <Icon name="Wallet" size={20} className="text-primary" />
                    –ÆMoney
                  </Label>
                </div>
              </RadioGroup>
            </div>
          </div>
          <DialogFooter>
            <Button onClick={handlePayment} className="w-full" size="lg">
              <Icon name="Lock" size={18} className="mr-2" />
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;
